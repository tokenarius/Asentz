query userVestings($block: Block_height, $id: String!) {
  incomingVestings: vestings(where: { recipient: $id }, orderBy: startedAt, block: $block) {
    id
    __typename
    status
    steps
    startedAt
    expiresAt
    modifiedAtTimestamp
    cliffDuration
    stepDuration
    stepShares
    cliffShares
    initialAmount
    initialShares
    remainingShares
    withdrawnAmount
    fromBentoBox
    token {
      id
      name
      symbol
      decimals
    }
    recipient {
      id
    }
    createdBy {
      id
    }
  }
  outgoingVestings: vestings(where: { createdBy: $id }, orderBy: startedAt, block: $block) {
    id
    __typename
    status
    steps
    startedAt
    expiresAt
    modifiedAtTimestamp
    cliffDuration
    stepDuration
    stepShares
    cliffShares
    initialAmount
    initialShares
    remainingShares
    withdrawnAmount
    fromBentoBox
    token {
      id
      name
      symbol
      decimals
    }
    recipient {
      id
    }
    createdBy {
      id
    }
  }
}

query vesting($block: Block_height, $id: ID!) {
  vesting(block: $block, id: $id) {
    id
    __typename
    status
    steps
    startedAt
    expiresAt
    modifiedAtTimestamp
    cliffDuration
    stepDuration
    stepShares
    cliffShares
    initialShares
    initialAmount
    remainingShares
    withdrawnAmount
    fromBentoBox
    txHash
    token {
      id
      name
      symbol
      decimals
    }
    status
    recipient {
      id
    }
    createdBy {
      id
    }
  }
}

query vestingTransactions(
  $block: Block_height
  $first: Int = 1000
  $orderBy: Transaction_orderBy = createdAtTimestamp
  $orderDirection: OrderDirection = desc
  $skip: Int
  $where: Transaction_filter
) {
  transactions(
    block: $block
    first: $first
    orderBy: $orderBy
    orderDirection: $orderDirection
    skip: $skip
    where: $where
  ) {
    id
    type
    amount
    toBentoBox
    createdAtBlock
    createdAtTimestamp
    txHash
    token {
      id
      name
      symbol
      decimals
    }
    to {
      id
    }
  }
}

query userStreams($block: Block_height, $id: String!) {
  incomingStreams: streams(where: { recipient: $id }, orderBy: startedAt, block: $block) {
    id
    __typename
    status
    startedAt
    expiresAt
    extendedAtTimestamp
    modifiedAtTimestamp
    initialShares
    initialAmount
    extendedShares
    initialSharesExtended
    remainingShares
    withdrawnAmount
    withdrawnAmountAfterExtension
    recipient {
      id
    }
    createdBy {
      id
    }
    token {
      id
      symbol
      name
      decimals
    }
  }
  outgoingStreams: streams(where: { createdBy: $id }, orderBy: startedAt, block: $block) {
    id
    __typename
    status
    startedAt
    expiresAt
    extendedAtTimestamp
    modifiedAtTimestamp
    initialShares
    initialAmount
    extendedShares
    initialSharesExtended
    remainingShares
    withdrawnAmount
    withdrawnAmountAfterExtension
    recipient {
      id
    }
    createdBy {
      id
    }
    token {
      id
      symbol
      name
      decimals
    }
  }
}

query stream($block: Block_height, $id: ID!) {
  stream(block: $block, id: $id) {
    id
    __typename
    status
    startedAt
    expiresAt
    extendedAtTimestamp
    modifiedAtTimestamp
    initialShares
    initialAmount
    extendedShares
    initialSharesExtended
    remainingShares
    withdrawnAmount
    withdrawnAmountAfterExtension
    txHash
    recipient {
      id
    }
    createdBy {
      id
    }
    token {
      id
      symbol
      name
      decimals
    }
  }
}

query streamTransactions(
  $block: Block_height
  $first: Int = 1000
  $orderBy: Transaction_orderBy = createdAtTimestamp
  $orderDirection: OrderDirection = desc
  $skip: Int
  $where: Transaction_filter
) {
  transactions(
    block: $block
    first: $first
    orderBy: $orderBy
    orderDirection: $orderDirection
    skip: $skip
    where: $where
  ) {
    id
    type
    amount
    toBentoBox
    createdAtBlock
    createdAtTimestamp
    txHash
    token {
      id
      name
      symbol
      decimals
    }
    to {
      id
    }
  }
}

query bentoBoxRebase($block: Block_height, $id: ID!) {
  rebase(block: $block, id: $id) {
    id
    base
    elastic
  }
}
query bentoBoxRebases(
  $block: Block_height
  $first: Int = 1000
  $orderBy: Rebase_orderBy
  $orderDirection: OrderDirection
  $skip: Int
  $where: Rebase_filter
) {
  rebases(
    block: $block
    first: $first
    orderBy: $orderBy
    orderDirection: $orderDirection
    skip: $skip
    where: $where
  ) {
    id
    base
    elastic
  }
}
